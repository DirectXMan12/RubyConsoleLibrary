h1. RubyConsoleLibrary

* An ncurses-/curses-like library for building console applications
** RubyConsoleLibrary is different from other ruby console libraries in that it is written wholly in ruby, with out any native code required (see below)

h3. [-note: not yet ruby 1.9 compatible-] [+Now working with Ruby 1.9!+]

h2. - Requirements/Installation -

* if you are on Windows, and are using the default command prompt (or powershell, etc), you must install win32console for this library to work correctly - it adds standard ANSI support to the windows console
* RubyConsoleLibrary will automatically detect a windows installation as the aim is to eventually ensure that it is automatically and simply cross-platform
* Currently non-Windows platforms require the use of _Unicode_ (I am working on correcting this, but for the moment Unicode is the easiest remedy to most installs of Linux having no CP437)

h2. - Usage -

bc[ruby].. require './console-main.rb'                                                              
include RubyConsoleLibrary

quit_app = false # predefined so can set later

a = ConsoleApp.new                                                                 # create a new application (don't forget to cleanup afterwards!)                
w = a.wins[0]                                                                      # get the default window
                                                                                                                                                                   
size = ConsoleApp.console_size                                                     
                                                                                   
w.box size[0]-1,size[1]-1, :foreground_blue                                        # draw a blue box around our window (starts at window corner, size of the console)
w.refresh                                                                          # refresh the view
                                                                                   
w.structure do                                                                     # define our window's controls                                                                                 
  t = textbox 27, [10,5]                                                           # a 27-character-wide textbox at (10,5) in our window
  ok = button [10,10], :text => 'OK'                                               # an automatically-sized button labeled 'OK' at (10,10)
                                                                               
  cancel = button [27,10], :text => 'Cancel'                                                                                                                       
  l = label [15, 15], :text => ' ', :default => {:interior => :background_green, :border => :none}
                                                                                                                                                                   
  cancel.on_press do                                                               # set the on_press action, which triggers upon 'interaction' with the control
    quit_app = true                                                                
  end                                                                              
                                                                                   
  ok.on_press do                                                                   
    l.text = t.text                                                                                                                                                
  end                                                                                                                                                              
end                                                                                                                                                                
                                                                                                                                                                   
w.refresh                                                                                                                                          
                                                                                   
inrouter = InputRouter.new(w)                                                      # initialize an input router to help deal with input to our window                
                                                                                   
inrouter.bindings do                                                               # route input events as such:
  bind_key(:up_arrow) do                                                           # bind the up arrow key to                                                        
    focus_prev                                                                     #         focus on the previous control                                           
  end                                                                              
  bind_key(:down_arrow) do                                                         
    focus_next                                                                      
  end                                                                                                                                                              
                                                                                                                                                                   
  bind_key(:ctrl_e) do                                                             # Ctrl-e will exit now                                                                               
    quit_app = true                                                                
  end                                                                              
                                                                                   
  bind_key(:enter) do                                                              # bind the enter key to
    unless current_control.input_focus then current_control.interact end           #         interact with the current control unless the current control 
  end                                                                              #         grabs text input (like the text box control)  
                                                                                                                                                                         
  capture_all_input :except => :existing_bindings do                               # capture all other keys and feed them to the current control if the                  
    if current_control.input_focus then feed_through end                           #         current control grabs text input                                            
  end                                                                              
end                                                                                
                                                                                   
Utils.noecho                                                                       
while (!quit_app)                                                                  # under the hood actual input-capture loop, to be simplified soon
  w.refresh                                                                        #         refresh the window
  instr = Utils.getch(false)                                                       #         get a single unfiltered character, blocking
  inrouter.handle_input(instr)                                                     #         (it may be a 'chord character', like the arrow keys)                                                                           
end                                                                                #         and send it to the input router                                                   
Utils.echo
a.cleanup                                                                          # cleanup (restore cursor, font options, etc)
